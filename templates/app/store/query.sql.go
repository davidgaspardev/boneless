// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package store

import (
	"context"
	"database/sql"
)

const createExample = `-- name: CreateExample :execresult
INSERT INTO examples (
  id, created_at, message
) VALUES (
  ?, ?, ?
)
`

type CreateExampleParams struct {
	ID        int32
	CreatedAt int64
	Message   string
}

func (q *Queries) CreateExample(ctx context.Context, arg CreateExampleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createExample, arg.ID, arg.CreatedAt, arg.Message)
}

const getExampleById = `-- name: GetExampleById :one
SELECT id, created_at, message FROM examples
WHERE id = ?
`

func (q *Queries) GetExampleById(ctx context.Context, id int32) (Example, error) {
	row := q.db.QueryRowContext(ctx, getExampleById, id)
	var i Example
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Message)
	return i, err
}

const listExamples = `-- name: ListExamples :many
SELECT id, created_at, message FROM examples
`

func (q *Queries) ListExamples(ctx context.Context) ([]Example, error) {
	rows, err := q.db.QueryContext(ctx, listExamples)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Example
	for rows.Next() {
		var i Example
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
